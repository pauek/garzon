#!/bin/bash

mirror="http://l4u-00.jinr.ru/LinuxArchive/Ftp/tinycorelinux/"
dist_dir="4.x/x86/release/distribution_files/"
tcz_dir="4.x/x86/tcz/"

function _download() {
    for file in $*; do
        if [ -f ${file} ]; then
            echo -n "File '$file' exists, overwrite (y/n)? "
            read resp
            if [ $resp == "y" ]; then
                rm -f $file
                wget -q ${mirror}${dist_dir}${file}
            fi
        else 
            wget -q ${mirror}${dist_dir}${file}
        fi
    done
}

mkdir -p $HOME/.grz/cache

function _cached_download() {
    pkg=$1
    if ! [ -f ${pkg} ]; then
        if [ -f $HOME/.grz/cache/${pkg} ]; then 
            sudo cp $HOME/.grz/cache/${pkg} ${pkg}
            echo "[C] "${pkg}
        else
            # porqué no puedo poner 'curl' aquí !?!?
            echo -n "[D] "${pkg}
            sudo wget -q ${mirror}${tcz_dir}${pkg}
            if [ -f ${pkg} ]; then
                cp ${pkg} $HOME/.grz/cache/${pkg}
            fi
            echo
        fi
    else
        echo "[A] "${pkg}
    fi
}

function _download_packages() {
    _silent pushd tce/optional
    for file in $*; do
        for ext in .tcz .tcz.dep; do
            _cached_download ${file}${ext}
        done
    done
    _silent popd
}

function _silent() {
    $* &> /dev/null;
}

function _report() {
    echo -n $1
    shift
    _silent $*
    echo
}

function _purge() {
    _silent pushd tce/optional
    for file in $*; do
        sudo rm -f ${file}.tcz{,.dep}
    done
    _silent popd
}

function _onboot() {
    for file in $*; do
        echo $file | sudo sh -c "cat >> tce/onboot.lst"
    done
}

function _image_mount() {
    imgfile=$1
    if ! [ -f $imgfile ]; then
        echo "error: image '"$imgfile"' doesn't exist"
        exit 1
    fi
    mkdir __image__
    sync
    sudo mount -o loop ${imgfile} __image__
    _silent pushd __image__
}

function _image_umount() {
    _silent popd
    sync
    sudo umount __image__
    rmdir __image__
    sync    
}

function _image_check_mounted() {
    currdir=$(basename $(pwd))
    if ! [ currdir != "__image__" ]; then
        echo "error: image not mounted"
        exit 1
    fi
}

function _image_init() {
    _image_check_mounted
    sudo mkdir -p tce/{optional,ondemand}
    sudo touch tce/onboot.lst
    sudo touch tce/bootlocal.sh # this is called from /opt/bootlocal.sh
    _download_packages mirrors kmaps
    _onboot mirrors.tcz kmaps.tcz
}

# init 
function download() {
    # Download 'core.gz' and 'vmlinuz' from TinyCoreLinux
    _download core.gz vmlinuz
}

# unpack <core.gz> <directory>
function unpack() {
    file=$1
    dir=$2
    if [ -z $dir ]; then
        echo "error: no dir specified"
        exit 1
    fi

    if ! [ -f $file ]; then
        echo "'"$file"' does no exist"
    fi
    
    if [ -d $dir ]; then
        echo -n "Erase existing dir (y/n): "
        read resp
        if [ $resp == "y" ]; then
            sudo rm -rf $dir
        else
            exit 0
        fi
    fi
    mkdir $dir
    _silent pushd $dir
    zcat ../$file | sudo cpio -i -H newc -d
    _silent popd
}

# repack <directory> <initrd.gz> 
function repack() {   
    dir=$1
    file=$2
    if ! [ -d $dir ]; then
        echo "error: dir '"${dir}"' does not exist"
        exit 1
    fi
    if [ -f $file ]; then
        echo -n "Erase existing file '"${file}"' (y/n): "
        read resp
        if [ $resp == "y" ]; then
            sudo rm -rf ${file}
        else
            exit 0
        fi
    fi
    _silent pushd ${dir}
    sudo find | sudo cpio -o -H newc | gzip -2 > ../${file}
    _silent popd
    sudo rm -rf ${dir}
}

# remaster <core.gz> <initrd.gz>
function remaster() {
# Check arguments
    core=$1
    initrd=$2
    if [ -z $core ]; then
        echo "error: no 'core.gz' specified"
        return 1
    fi
    if [ -z $initrd ]; then
        echo "error: no 'initrd.gz' specified"
        return 1
    fi
    if ! [ -f $core ]; then
        echo "'"$core"' does not exist"
        return 1
    fi

    unpack $core __initrd__

# Introduce modifications 
    _silent pushd __initrd__

    # create mountpoint for iso
    sudo mkdir -p mnt/cdrom

    # WARNING: si pones una '/' delante
    # de todos los paths tipo 'cat > path' te cargas tu Linux!!

    # enable root terminal on serial port
    sudo sh -c "cat >> etc/inittab" <<EOF
# garzon
ttyS0::once:/bin/sh -c "PS1=\$(cat /proc/cmdline | xargs -n1 | grep grz | cut -d= -f2) sh"
EOF

    # permit execution of script from 'vda' partition
    sudo sh -c "cat >> opt/bootlocal.sh" <<EOF
# call init script in apps partition
source /mnt/vda/tce/bootlocal.sh 
EOF

    # create user 'garzon'
    sudo sh -c "cat >> etc/passwd" <<EOF
garzon:x:5000:5000:Garzon,,,:/home/garzon:/bin/sh
EOF
    sudo sh -c "cat >> etc/group" <<EOF
garzon:x:5000:
EOF

    # create judge script
    sudo sh -c "cat > bin/garzon.sh" <<EOF
#!/bin/sh

# Mount CD-ROM (read-only problem)
mount /dev/cdrom /mnt/cdrom

# Launch judge
shash=\$(sha1sum /mnt/cdrom/solution | cut -d' ' -f1)
su garzon -c "
cd /mnt/cdrom/problem;
echo \$shash;
PATH=\$PATH:/usr/local/bin:/usr/local/sbin:/mnt/vda/src/go/bin ../judge < ../solution > /tmp/output-\$shash;
echo \$shash;
cat /tmp/output-\$shash;
rm -f /tmp/output-\$shash;
"

# Umount CD-ROM
umount /mnt/cdrom

EOF
    sudo sh -c "chmod +x bin/garzon.sh"

    sudo mkdir -p home/garzon
    sudo chown 5000:5000 home/garzon
    sudo chmod 700 home/garzon
    _silent popd

    repack __initrd__ $initrd
}


# createimg <file.img> <integer size in Mb>
function createimg() {
    file=$1
    sz=$2
    if [ -z $file ]; then
        echo "error: no file specified"
        exit 1
    fi
    if [ -z $sz ]; then
        echo "error: no size specified"
        exit 1
    fi
    if [ -f $file ]; then
        echo -n "File '"${file}"' exists, overwrite (y/n)? "
        read resp
        if [ $resp == "y" ]; then
            rm -f $file
        else
            exit 0
        fi
    fi
    _report "Creating image... "  dd if=/dev/zero of=$file bs=1M count=$sz
    _report "Formatting image... " sudo mkfs.ext3 -F $file
    echo "Installing base packages: "
    _image_mount $file
    _image_init
    _image_umount
}

function pkglist() {
    cat <<EOF
gcc
go
EOF
}

function pkgclean() {
    rm -rf $HOME/.grz/cache/*
}

## Installation scripts ####################################################

function _install_gcc() {
    _image_mount $1
    _download_packages gcc gcc_libs binutils gmp mpfr eglibc_base-dev libmpc 
    echo "eglibc_base-dev.tcz" | sudo sh -c "cat >> tce/optional/gcc.tcz.dep"
    _onboot gcc.tcz
    _image_umount
}

function _install_go() {
    imgfile=$1
    _image_mount ${imgfile} # checks if imgfile exists

    # Decompress source
    sudo mkdir src
    _silent pushd src
    gosrc=go1.0.3.src.tar.gz
    if ! [ -f $gosrc ]; then
        _report "Downloading Go source... " sudo wget http://go.googlecode.com/files/$gosrc
    fi
    _report "Decompressing Go source... " sudo tar xzvf $gosrc
    _silent popd

    # Install bash + gcc (+ linux headers)
    _download_packages bash ncurses ncurses-common \
        gcc gcc_libs binutils gmp mpfr eglibc_base-dev libmpc \
        linux-3.0.1_api_headers

    _image_umount

    # Compile Go inside the VM
    (cat <<EOF
PS1=''
su tc -c "tce-load -i bash"
su tc -c "tce-load -i gcc"
su tc -c "tce-load -i eglibc_base-dev.tcz"
su tc -c "tce-load -i linux-3.0.1_api_headers"
export PATH=/usr/local/bin:\$PATH
cd /mnt/vda/src/go/src
bash ./make.bash
poweroff
EOF
    ) | kvm -kernel vmlinuz \
            -initrd initrd.gz \
            -append "tce=vda kmap=qwerty/es vga=788 nodhcp" \
            -drive file=${imgfile},if=virtio \
            -nographic \
            -m 512M

    # Set environment + erase unneeded packages
    _image_mount ${imgfile}
    sudo sh -c "cat >> tce/bootlocal.sh" <<EOF
cat >> /etc/profile.d/go.sh <<INNEREOF
# Go Environment
export GOROOT=/mnt/vda/src/go
export PATH=\\\$PATH:\\\$GOROOT/bin
INNEREOF
EOF
    _purge bash ncurses ncurses-common linux-3.0.1_api_headers
    _image_umount
}

#############################################################################

function install() {
    imgfile=$1
    shift
    for pkg in $*; do
        case $pkg in
            gcc) _install_gcc ${imgfile} ;;
            go)  _install_go  ${imgfile} ;;
        esac
    done
}

function convert() {
    infile=$1
    outfile=$2
    if ! [ -f $infile ]; then
        echo "error: image '"$infile"' doesn't exist"
        exit 1
    fi
    if [ -f $outfile ]; then
        echo -n "File '"${outfile}"' exists, overwrite (y/n)? "
        read resp
        if [ $resp == "y" ]; then
            rm $outfile
        else
            exit 1
        fi
    fi
    # using __tmp.img in case infile == outfile
    qemu-img convert -O qcow2 ${infile} __tmp.img
    mv __tmp.img ${outfile}
}

function launch() {
    imgname=$1
    if ! [ -f $imgname ]; then
        echo "error: image '"$imgname"' doesn't exist"
        exit 1
    fi
    shift
    if ! [ -f vmlinuz ]; then
        echo "File 'vmlinuz' not found"
        exit 1
    fi
    if ! [ -f initrd.gz ]; then
        echo "File 'initrd.gz' not found"
        exit 1
    fi

    kvm -kernel vmlinuz -initrd initrd.gz \
        -append "tce=vda kmap=qwerty/es vga=788 nodhcp grz=[${imgname}]" \
        -drive "file=$imgname,if=virtio" \
        -net none \
        $*
}

function pkgclean() {
    rm -rf $HOME/.grz/cache
}

function help() {    
    cat <<EOF
usage: grz-vm <command> [arguments]

command:
    download
    unpack <initrd.gz> <dir>
    repack <initrd.gz> <dir>
    remaster <core.gz> <initrd.gz>
    createimg <file.img> <integer size in Mb>
    pkglist
    pkgclean
    install <file.img> packages...
    convert <infile.img> <outfile.img>
    launch <file.img> [-nographic]

EOF
}

if [ -z "$*" ]; then
    help
else
    $*
fi
